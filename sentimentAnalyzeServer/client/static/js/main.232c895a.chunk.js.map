{"version":3,"sources":["EmotionTable.js","App.js","reportWebVitals.js","index.js"],"names":["EmotionTable","className","Object","entries","this","props","emotions","result","emotion","document","map","mapEntry","React","Component","App","state","innercomp","rows","cols","id","mode","sentimentOutput","sentiment","renderTextArea","getElementById","value","setState","renderTextBox","sendForSentimentAnalysis","url","axios","get","then","response","rejected","output","data","label","style","color","fontSize","score","sendForEmotionAnalysis","title","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.232c895a.chunk.js","sourcesContent":["import React from 'react';\r\nimport './bootstrap.min.css';\r\n\r\nclass EmotionTable extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <br />\r\n        <br />\r\n        <table className=\"table table-bordered\">\r\n          <tbody>\r\n            {\r\n              Object.entries(this.props.emotions.result.emotion.document.emotion).map((mapEntry) => {\r\n                return (\r\n                  <tr>\r\n                    <td>{mapEntry[0]}</td>\r\n                    <td>{mapEntry[1]}</td>\r\n                  </tr>\r\n                )\r\n              })\r\n            }\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default EmotionTable;\r\n","import './bootstrap.min.css';\r\nimport './App.css';\r\nimport EmotionTable from './EmotionTable.js';\r\nimport React from 'react';\r\nimport axios from 'axios';\r\n\r\nclass App extends React.Component {\r\n  state = {innercomp:<textarea rows=\"4\" cols=\"50\" id=\"textinput\"/>,\r\n  mode: \"text\",\r\n  sentimentOutput:[],\r\n  sentiment:true\r\n}\r\n\r\nrenderTextArea = ()=>{\r\n    \r\n    document.getElementById(\"textinput\").value = \"\";\r\n    if(this.state.mode === \"url\") {\r\n      this.setState({innercomp:<textarea rows=\"4\" cols=\"50\" id=\"textinput\"/>,\r\n      mode: \"text\",\r\n      sentimentOutput:[],\r\n      sentiment:true\r\n    })\r\n    } \r\n  }\r\n\r\n  renderTextBox = ()=>{\r\n    document.getElementById(\"textinput\").value = \"\";\r\n    if(this.state.mode === \"text\") {\r\n      this.setState({innercomp:<textarea rows=\"1\" cols=\"50\" id=\"textinput\"/>,\r\n      mode: \"url\",\r\n      sentimentOutput:[],\r\n      sentiment:true\r\n    })\r\n    }\r\n  }\r\n\r\n  sendForSentimentAnalysis = () => {\r\n    this.setState({sentiment:true});\r\n    let ret = \"\";\r\n    let url = \".\";\r\n\r\n    if(this.state.mode === \"url\") {\r\n      url = url+\"/url/sentiment?url=\"+document.getElementById(\"textinput\").value;\r\n    } else {\r\n      url = url+\"/text/sentiment?text=\"+document.getElementById(\"textinput\").value;\r\n    }\r\n\r\n    ret = axios.get(url);\r\n    ret.then((response,rejected)=>{\r\n      if(rejected) return;\r\n      //Include code here to check the sentiment and fomrat the data accordingly\r\n\r\n      let output = response.data.result.sentiment.document;\r\n      if(output.label === \"positive\") {\r\n        output = <div style={{color:\"green\",fontSize:20}}>{output.label +\" \"+output.score}</div>\r\n      } else if (output.label === \"negative\"){\r\n        output = <div style={{color:\"red\",fontSize:20}}>{output.label +\" \"+output.score}</div>\r\n      } else {\r\n        output = <div style={{color:\"yellow\",fontSize:20}}>{output.label +\" \"+output.score}</div>\r\n      }\r\n      this.setState({sentimentOutput:output});\r\n    });\r\n  }\r\n\r\n  sendForEmotionAnalysis = () => {\r\n    this.setState({sentiment:false});\r\n    let ret = \"\";\r\n    let url = \".\";\r\n    if(this.state.mode === \"url\") {\r\n      url = url+\"/url/emotion?url=\"+document.getElementById(\"textinput\").value;\r\n    } else {\r\n      url = url+\"/text/emotion/?text=\"+document.getElementById(\"textinput\").value;\r\n    }\r\n    ret = axios.get(url);\r\n\r\n    ret.then((response,rejected)=>{\r\n      if(response){\r\n        this.setState({sentimentOutput:<EmotionTable emotions={response.data}/>});\r\n      }\r\n    });\r\n  }\r\n  \r\n\r\n  render() {\r\n    document.title = \"Sentiment Analyzer\";\r\n    return (  \r\n      <div className=\"App\">\r\n      <button className=\"btn btn-info\" onClick={this.renderTextArea}>Text</button>\r\n        <button className=\"btn btn-dark\"  onClick={this.renderTextBox}>URL</button>\r\n        <br/><br/>\r\n        {this.state.innercomp}\r\n        <br/>\r\n        <button className=\"btn-primary\" onClick={this.sendForSentimentAnalysis}>Analyze Sentiment</button>\r\n        <button className=\"btn-primary\" onClick={this.sendForEmotionAnalysis}>Analyze Emotion</button>\r\n        <br/>\r\n            {this.state.sentimentOutput}\r\n      </div>\r\n    );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}